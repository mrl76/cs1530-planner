Calendar Test Plan for Unit Tests
Michael Long
Created: 11/13/2018
Last Updated: 11/17/2018

Classes to test:
-Event.java
-Exam.java
-Assignment.java
-Appointment.java
-Interval.java
-Timetable.java
-Calendar.java
-Course.java

Note: Interval.java was excluded from unit testing due to it only holding an enum object (11/1/2018)
----------------------------------------------------------------------------------------------------
Event.java (ll/13/2018)

Methods:
public Event(String name, String description, Date date)
public Event(String name)
public String getName()
public void setName(String name)
public String getDescription()
public void setDescription(String description)
public Date getDate()
public void setDate(Date date)
public int compareTo(Event o)

Because this an abstract class I may need to extend it for a
test class

1) IDENTIFIER:      case-event-full-constructor
   DESCRIPTION:     This test verifies that the full constructor method of the Event class
                    properly instatiates an Event object based on the passed in arguements
   PRECONDTIONS:    This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The test should verify that a new Event object has been created 
                    using the correct passed in arguments 

2) IDENTIFIER:      case-event-short-constructor
   DESCRIPTION:     This test verifies that the short constructor method of the Event class
                    properly instatiates an Event object based on the passed in name
   PRECONDTIONS:    This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The test should verify that a new Event object has been created 
                    using the correct passed in name, while the other feilds should
                    be undefined

3) IDENTIFIER:      case-event-get-name
   DESCRIPTION:     This test verifies that the getName() function of the Event class 
                    will return the correct name varibale associated with the object
   PRECONDTIONS:    This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  This method should return the name of the Event object from which it
                    was called

4) IDENTIFIER:      case-event-set-name
   DESCRIPTION:     This test verifies that the name field of the Event object from which 
                    the method was called from is updated to the new passed in name when 
                    this method is called
   PRECONDTIONS:    This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The name variable of the Event object that called the method should 
                    be updated to the new name

5) IDENTIFIER:      case-event-get-description
   DESCRIPTION:     This test verifies that the description of the Event object is returned
                    when this method is called
   PRECONDTIONS:    This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The method should return the description of the Event object when it is 
                    called

6) IDENTIFIER:      case-event-set-description
   DESCRIPTION:     This test verifies that the description of the Event object from where
                    this method is called is changed to the passed in description
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The decription variable of the Event object from which this method is
                    called whould be changed to the passed in description

7) IDENTIFIER:      case-event-get-date
   DESCRIPTION:     This test verifies that the correct date is returned when the getDate()
                    method is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The method shall return the correct date object that is held within the 
                    Event object

8) IDENTIFIER:      case-event-set-date
   DESCRIPTION:     This test verifies that when the setDate() method is called, the date 
                    variable within the Event object from where the method was called changes
                    to the passed in date
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The date variable with in the Event object from with the method was called
                    should be equal to the date that was passed in as an argument

9) IDENTIFIER:      case-event-compare-to-greater
   DESCRIPTION:     This test verifies that when an event with a later date object is passed 
                    into the compareTo() function, a positive integer is returned
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The compareTo() method should return a positive integer that coresponds
                    to the difference between the two dates

10)IDENTIFIER:      case-event-compare-to-less
   DESCRIPTION:     This test verifies that when an event with a later date object is passed 
                    into the compareTo() function, a negative integer is returned
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Event class
   POSTCONDITIONS:  The compareTo() method should return a negative integer that coresponds
                    to the difference between the two dates
----------------------------------------------------------------------------------------------------
Exam.java(11/13/2018)

Methods:
public Exam(String name, Course course)
public Exam(String name)
public Course getCourse()
public void setCourse(Course course)

1) IDENTIFIER:      case-exam-full-constrcutor
   DESCRIPTION:     This test verifies that the Exam is properly initialized when the full 
                    constructor is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Exam class
   POSTCONDITIONS:  The method will return a properly formatted Exam object using all of the
                    passed in arguments

2) IDENTIFIER:      case-exam-small-constructor
   DESCRIPTION:     This test verifies that the Exam is properly initialized when the small
                    constructor is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Exam class
   POSTCONDITIONS:  This method will return a properly formatted Exam object using the name 
                    passed in as an argument

3) IDENTIFIER:      case-exam-get-course
   DESCRIPTION:     This test verifies that the getCourse() method of the Exam class returns
                    the Course that is stored in the Exam object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Exam class
   POSTCONDITIONS:  The method should return the Course Object that is stored in the Exam object

4) IDENTIFIER:      case-exam-set-course
   DESCRIPTION:     This test verifies that the setCourse() method of the Exam class will change
                    the course that is stored in the Exam object to the Course that is passed into
                    the method
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Exam class
   POSTCONDITIONS:  The setCourse() method should change the stored Course object to the Course
                    passed into the method

----------------------------------------------------------------------------------------------------
Assignment.java(11/13/2018)

Methods:
public Assignment(String name, Course course)
public Assignment(String name)
public Course getCourse()
public void setCourse(Course course)

1) IDENTIFIER:      case-assignment-full-constructor
   DESCRIPTION:     This test verifies that the Assignment is properly initialized when the full 
                    constructor is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Assignment class
   POSTCONDITIONS:  The method should return a new Assignment object that was created bugin the
                    passed in name and the passed in course object

2) IDENTIFIER:      case-assignment-short-constructor
   DESCRIPTION:     This test verifies that the Assignment is properly initialized when the short 
                    constructor is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Assignment class
   POSTCONDITIONS:  The method should return a new Assignment object that was created using the
                    passed in name and the course object should be left NULL

3) IDENTIFIER:      case-assignment-get-course-set
   DESCRIPTION:     This test verifies that
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Assignment class
   POSTCONDITIONS:  The method should return the course method associated with the assignment object

4) IDENTIFIER:      case-assignment-get-course-not-set
   DESCRIPTION:     This test verifies that
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Assignment class
   POSTCONDITIONS:  The method should return some kind of error when this method is called 
                    but no course has been set

5) IDENTIFIER:      case-assignment-set-course
   DESCRIPTION:     This test verifies that
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Assignment class
   POSTCONDITIONS:  This method should set the Course object associated with this Assignment object
                    to the passed in Course object

----------------------------------------------------------------------------------------------------
Appointment.java(11/14/2018)

Methods:
public Appointment(String name, String description, Date date)
public Appointment(String name)
public String getName()
public void setName(String name)
public String getDescription()
public void setDescription(String description)
public Date getDate()
public void setDate(Date date)
@Override
public int compareTo(Appointment o)

1) IDENTIFIER:      case-appointment-full-constructor
   DESCRIPTION:     This test verifies that the Appointment is properly initialized when the full 
                    constructor is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:  The method should return a new Assignment object that was created bugin the
                    passed in name and the passed in course object

2) IDENTIFIER:      case-appointment-short-constructor
   DESCRIPTION:     This test verifies that the Appointment is properly initialized when the short 
                    constructor is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Apointment class
   POSTCONDITIONS:  The method should return a new Appointment object that was created using in the
                    passed in name and the date object and description should be left NULL

3) IDENTIFIER:      case-appointment-get-name
   DESCRIPTION:     This test verifies that when the method getName() is called, it returns the name string
                    that is associated with the object.
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:  The method should return a string that is associated with the appointment
                    object that it was called from

4) IDENTIFIER:      case-appointment-set-name
   DESCRIPTION:     This test verifies that when the mehtod setName() is called from a appointment object
                    that the name associated with the object is changed to the passed in name
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:

5) IDENTIFIER:      case-appointment-get-description
   DESCRIPTION:     This test verifies that when the getDescription() method is called from a Appointment
                    object that the description associated with the Appointment object is returned 
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:  This method should return the description that is associated with the Appointment
                    from which it was called

6) IDENTIFIER:      case-appointment-set-decription
   DESCRIPTION:     This test verifies that when the setDescription() method is called from a 
                    Appointment object that the Appointment object's description changes to the
                    passed in description
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:  This method should change the description associated with the Appointment
                    object to the passed in description

7) IDENTIFIER:      case-appointment-get-date
   DESCRIPTION:     This test verifies that when the getDate() method is called from an Appointment
                    object, that the date associated with the Appointment object is returned
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class 
   POSTCONDITIONS:  When this method is called, it should return the date that is associated with
                    the Appointment object

8) IDENTIFIER:      case-appointment-set-date
   DESCRIPTION:     This test verifies that when the setDate() method is called from an Appointment
                    object, that the Appointment's associated date is changed to the passed in date
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:  This method should change the date associated with the Appointment object to 
                    the passed in one

9) IDENTIFIER:      case-appointment-compare-to-greater
   DESCRIPTION:     This test verifies that when an appointment with a later date object is passed 
                    into the compareTo() function, a positive integer is returned
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:  The compareTo() method should return a positive integer that coresponds
                    to the difference between the two dates

10)IDENTIFIER:      case-appointment-compare-to-less
   DESCRIPTION:     This test verifies that when an appointment with a later date object is passed 
                    into the compareTo() function, a negative integer is returned
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Appointment class
   POSTCONDITIONS:  The compareTo() method should return a negative integer that coresponds
                    to the difference between the two dates

----------------------------------------------------------------------------------------------------
Interval.java(11/13/2018)

Methods:
Currently Interval.java is simply an enum, no need for testing

----------------------------------------------------------------------------------------------------
Timetable.java(11/17/2018)

Methods:
public Timetable(Interval interval, int intervalSize, Date startDate, Date endDate, boolean allDay, boolean[] days)
public Timetable(Date startDate)
public Timetable(String dataString)
public String toString()
public Interval getInterval()
public void setInterval(Interval interval)
public int getIntervalSize()
public void setIntervalSize(int intervalSize)
public Date getStartDate()
public void setStartDate(Date startDate)
public Date getEndDate()
public void setEndDate(Date endDate)
public boolean isAllDay()
public void setAllDay(boolean allDay)
public boolean isDayOpen(DayOfWeek day)
public void setDay(DayOfWeek day, boolean open)

1) IDENTIFIER:      case-timetable-full-constructor
   DESCRIPTION:     This test verifies that when the full Timetable contructor creates a new 
                    Timetable object using the passed in parameters
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return a new Timetable object created from the passed in
                    parameters with each parameter being mapped to its object variable with the
                    same name

2) IDENTIFIER:      case-timetable-short-date-constructor
   DESCRIPTION:     This test verifies that when the short date constructor is called a new
                    Timetable object is made 
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return a new Timetable object that uses the passed in
                    date object as the start and end time but all other feilds shouls be set
                    to default values

3) IDENTIFIER:      case-timetable-datastring-constructor
   DESCRIPTION:     This test verifies that the Timetable datastring constructor creates a new
                    Timetable object from the passed in datastring 
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should parse the datastring and return a new Timetable object
                    based on the datastring's contents

4) IDENTIFIER:      case-timetable-to-string
   DESCRIPTION:     This test verifies that the toString() method of the Timetable class
                    returns a properly formatted String representaion of the Timetable object 
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return the properly formatted verision of the Timetable
                    object

5) IDENTIFIER:      case-timetable-get-interval
   DESCRIPTION:     This test verifies that when the getInterval() is called, the method returns
                    the interval
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return the interval that is associated with the object
                    from which it was called

6) IDENTIFIER:      case-timetable-set-interval
   DESCRIPTION:     This test verifies that the setInterval() method of the Timetable class sets
                    the interval variable in the Timetable object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should set the interval variable within the object from which
                    the method was called to the passed in interval argument that was passed in

7) IDENTIFIER:      case-timetable-get-interval-size
   DESCRIPTION:     This test verifies that the getIntervalSize() method returns the intervalSize
                    variable of the Timetable object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return the intervalSize variable of the Timetable object
                    from which it was called

8) IDENTIFIER:      case-timetable-set-interval-size
   DESCRIPTION:     This test verifies that the setIntervalSize() method sets the intervalSize variable
                    to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should change the intervalSize variable of the Timetable object to 
                    the passed in value 

9) IDENTIFIER:      case-timetable-get-start-date
   DESCRIPTION:     This test verifies that the getStartDate() method returns the startDate
                    variable of the Timetable object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return the startDate variable of the Timetable object
                    from which it was called

10)IDENTIFIER:      case-timetable-set-start-date
   DESCRIPTION:     This test verifies that the setStartDate() method sets the startDate variable
                    to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should change the startDate variable of the Timetable object to 
                    the passed in value 

11)IDENTIFIER:      case-timetable-get-end-date
   DESCRIPTION:     This test verifies that the getEndDate() method returns the startDate
                    variable of the Timetable object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return the endDate variable of the Timetable object
                    from which it was called

12)IDENTIFIER:      case-timetable-set-end-date
   DESCRIPTION:     This test verifies that the setEndDate() method sets the endDate variable
                    to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should change the endDate variable of the Timetable object to 
                    the passed in value 

13)IDENTIFIER:      case-timetable-is-all-day
   DESCRIPTION:     This test verifies that the isAllDay() method returns the value of the allDay
                    variable of the Timetable object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return the value of the allDay variable within the Timetable
                    object from which it was called

14)IDENTIFIER:      case-timetable-set-all-day
   DESCRIPTION:     This test verifies that the setAllDay() method sets the allDay variable
                    to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should change the allDay variable of the Timetable object to 
                    the passed in value 

15)IDENTIFIER:      case-timetable-is-day-open
   DESCRIPTION:     This test verifies that the isDayOpen() method returns whether or not a
                    day is open within the Timetable
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should return true if the day specified by the passed in
                    argument is free, otherwise it should return false


16)IDENTIFIER:      case-timetable-set-day
   DESCRIPTION:     This test verifies that when the setDay() method is called the specified day's
                    value is set to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Timetable class
   POSTCONDITIONS:  This method should change the index in the days array within the Timetable object
                    to the passed boolean open.

----------------------------------------------------------------------------------------------------
Calendar.java(11/17/2018)

Methods:
public Calendar()
public Set<Course> getCourses()
public void addCourse(Course c)
public void removeCourse(Course c)
public SortedSet<Appointment> getEvents()

1) IDENTIFIER:      case-calendar-constructor
   DESCRIPTION:     This test verifies that an empty Calendar object is created when the
                    Calendar constructor is called
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Calendar class
   POSTCONDITIONS:  This method should return a new Calendar object with an empty course list and 
                    an empty event list

2) IDENTIFIER:      case-calendar-get-courses
   DESCRIPTION:     This test verifies that the getCourses() method will return the course list
                    of the Calendar
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Calendar class
   POSTCONDITIONS:  This method should return the Set<Course> courses of the Calendar Object
                    where the method was called from

3) IDENTIFIER:      case-calendar-remove-course-present
   DESCRIPTION:     This test verifies that the removeCourse() method removes the specified course
                    from the Calendar object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Calendar class
   POSTCONDITIONS:  The method should remove the course from the Set<Course> courses if there is
                    a course that matches in the list

4) IDENTIFIER:      case-calendar-remove-course-not-present
   DESCRIPTION:     This test verifies that the removeCourse() method should return some sort of 
                    error when a course that is not in the list is passed in
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Calendar class
   POSTCONDITIONS:  The method should return an error when the passed in course does not exist
                    within the Calendar's course list

5) IDENTIFIER:      case-calendar-get-events
   DESCRIPTION:     This test verifies that when the getEvents() method is called the Calendar's
                    event list is returned
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Calendar class
   POSTCONDITIONS:  This method should return the SortedSet<Appointment> events that belongs to
                    the Calendar object where it was called from

----------------------------------------------------------------------------------------------------
Course.java(11/17/2018)
Methods:
public Course(String name, String description, Timetable timetable)
public Course(String dataString)
public String getName()
public void setName(String name)
public String getDescription()
public void setDescription(String description)
public Timetable getTimetable()
public void setTimetable(Timetable timetable)
@Override
public String toString()

1) IDENTIFIER:      case-course-full-constructor
   DESCRIPTION:     This test verifies that the full course constructor creates a new Course
                    and sets its variables to the passed in values
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should return a new Course object whose variables have been
                    set to the passed in values

2) IDENTIFIER:      case-course-datastring-constructor
   DESCRIPTION:     This test verifies that the datastring constructor creates a new Course
                    and sets it variables according to the datastring
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should return a new COurse object whose variables are based
                    on the data contained within the data string 

3) IDENTIFIER:      case-course-get-name
   DESCRIPTION:     This test verifies that the getName() method returns the name
                    variable of the Course object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should return the name variable of the Course object from
                    which the method was called

4) IDENTIFIER:      case-course-set-name
   DESCRIPTION:     This test verifies that the setName() method changes the name variable
                    of the Course variable to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should change the name variable of the course object to 
                    the passed in value 

5) IDENTIFIER:      case-course-get-description
   DESCRIPTION:     This test verifies that the getDescription() method returns the description
                    variable of the Course object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should return the description variable of the Course object from
                    which the method was called

5) IDENTIFIER:      case-course-set-description
   DESCRIPTION:     This test verifies that the setDescription() method changes the description variable
                    of the Course variable to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should change the description variable of the Course object to 
                    the passed in value 

6) IDENTIFIER:      case-course-get-timetable
   DESCRIPTION:     This test verifies that the getTimetable() method returns the timetable
                    variable of the Course object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should return the timetable variable of the Course object from
                    which the method was called

7) IDENTIFIER:      case-course-set-timetable
   DESCRIPTION:     This test verifies that the setTimetable() method changes the timetable variable
                    of the Course variable to the passed in value
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should change the timetable variable of the Course object to 
                    the passed in value 

8) IDENTIFIER:      case-course-to-string
   DESCRIPTION:     This test verifies that the toString() method of the Course class
                    returns a properly formatted String representaion of the Course object 
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the Course class
   POSTCONDITIONS:  This method should return the properly formatted verision of the Course
                    object

----------------------------------------------------------------------------------------------------
UserProfile.java (11/17/2018)

Methods:
public UserProfile(String name, String password, Calendar cal)
public UserProfile(String name, String password)
public UserProfile(String name)
public Calendar getCalendar()
public String getUsername()
public boolean verifyPassword(String attempt)
public boolean verifyUserName(String attempt)
public void resetUserName(String newName)
public boolean resetPassword(String newPassword, String oldPassword)
@Override
public boolean equals(Object obj)
@Override
public int hashCode()

1) IDENTIFIER:      case-user-profile-full-constructor
   DESCRIPTION:     This test verifies that the full UserProfile constructor creates a new UserProfile
                    and sets its variables to the passed in values
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should return a new UserProfile object created from the passed in
                    parameters with each parameter being mapped to its object variable with the
                    same name

2) IDENTIFIER:      case-user-profile-name-password-constructor
   DESCRIPTION:     This test verifies that when the name/password constructor is called for the UserProfile
                    object that a new UserProfile is created and the username and password are set to the passed
                    in values but creates a new Calendar object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should create a new UserProfile object and sets the username and password to the
                    passed in values but creates a new calendar object for the calendar variable

3) IDENTIFIER:      case-user-profile-name-constructor
   DESCRIPTION:     This test verifies that when only a username is passed into the constructor a new UserProfile
                    is created using the passed in username
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method should return a new UserProfile object where the username is the passed in name,
                    the password is null and calendar is a new Calendar object

4) IDENTIFIER:      case-user-profile-get-calendar
   DESCRIPTION:     This test verifies that the getCalendar() method returns the Calendar
                    variable of the UserProfile object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should return the Calendar variable of the UserProfile object from
                    which the method was called

5) IDENTIFIER:      case-user-profile-get-username
   DESCRIPTION:     This test verifies that the getUsername() method returns the username
                    variable of the UserProfile object
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should return the username variable of the UserProfile object from
                    which the method was called

6) IDENTIFIER:      case-user-profile-verify-password-correct
   DESCRIPTION:     This test verifies that when the attempt argument equals the stored password of
                    the UserProfile the verifyPassword() method will return true
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method will return true if the attempt argument is equal to the password variable
                    of the UserProfile from which it was called

7) IDENTIFIER:      case-user-profile-verify-password-incorrect
   DESCRIPTION:     This test verifies that when the attempt argument does not equal the stored password of
                    the UserProfile the verifyPassword() method will return false
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method will return false if the attempt argument is not equal to the password variable
                    of the UserProfile from which it was called

8) IDENTIFIER:      case-user-profile-verify-username-correct
   DESCRIPTION:     This test verifies that when the attempt argument equals the stored username of
                    the UserProfile the verifyUserName() method will return true
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method will return true if the attempt argument is equal to the username variable
                    of the UserProfile from which it was called

9) IDENTIFIER:      case-user-profile-verify-username-incorrect
   DESCRIPTION:     This test verifies that when the attempt argument does not equal the stored username of
                    the UserProfile the verifyUserName() method will return false
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method will return false if the attempt argument is not equal to the username variable
                    of the UserProfile from which it was called

10)IDENTIFIER:      case-user-profile-reset-username
   DESCRIPTION:     This test verifies that when the resetUserName() method is called the UserProfile's username
                    is changed to the passed in newName
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should change the username variable of the UserProfile object to 
                    the passed in value 

11)IDENTIFIER:      case-user-profile-reset-password-equal
   DESCRIPTION:     This test verifies that when the resetPassword() method is called and the new password is 
                    not the same as the old password the UserProfile's password is changed to the passed in newPassword
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should change the password variable of the UserProfile object to 
                    the passed in value

12)IDENTIFIER:      case-user-profile-reset-password-not-equal
   DESCRIPTION:     This test verifies that when the resetPassword() method is called and the new password is 
                    equal to the old password the method should return false
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should return false if the new password is equal to the old one

13)IDENTIFIER:      case-user-profile-equals-true
   DESCRIPTION:     This test verifies that when a UserProfile with the same username is passed into the
                    equals() method the method should return true
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method should return true if the passed in object is a UserProfile and has the same
                    username of the UserProfile fro which the method was called

14)IDENTIFIER:      case-user-profile-equals-not-UserProfile
   DESCRIPTION:     This test verifies that when an object that is not a UserProfile is passed into the 
                    equals() method the method should return false
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method should return false if the passed in object is not a UserProfile

15)IDENTIFIER:      case-user-profile-equals-username-not-equal
   DESCRIPTION:     This test verifies that when an object that is a UserProfile and has a username that is not
                    equal to the username of the UserProfile from which this method was called then the method
                    should return false
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  The method should return false if the passed in object is a UserProfile but has a username
                    that is not equal to the username of the UserProfile from which the method was called

16)IDENTIFIER:      case-user-profile-hash-code
   DESCRIPTION:     This test verifies that the hashCode() method returns a hash of the UserProfile
   PRECONDITIONS:   This test will be part of automated unit testing all setup will be
                    handled with the test program
   EXECUTION STEPS: This test will run in the unit test program for the UserProfile class
   POSTCONDITIONS:  This method should return a hash that represents the UserProfile that called the method